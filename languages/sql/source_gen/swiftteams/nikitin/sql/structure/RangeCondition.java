package swiftteams.nikitin.sql.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RangeCondition extends Condition {
  public static final String concept = "swiftteams.nikitin.sql.structure.RangeCondition";
  public static final String MODIFIER = "modifier";
  public static final String EXPR = "expr";
  public static final String LBOUND = "lbound";
  public static final String RBOUND = "rbound";

  public RangeCondition(SNode node) {
    super(node);
  }

  public RangeConditionModifier getModifier() {
    String value = super.getProperty(RangeCondition.MODIFIER);
    return RangeConditionModifier.parseValue(value);
  }

  public void setModifier(RangeConditionModifier value) {
    super.setProperty(RangeCondition.MODIFIER, value.getValueAsString());
  }

  public Expression getExpr() {
    return (Expression)this.getChild(Expression.class, RangeCondition.EXPR);
  }

  public void setExpr(Expression node) {
    super.setChild(RangeCondition.EXPR, node);
  }

  public Expression getLbound() {
    return (Expression)this.getChild(Expression.class, RangeCondition.LBOUND);
  }

  public void setLbound(Expression node) {
    super.setChild(RangeCondition.LBOUND, node);
  }

  public Expression getRbound() {
    return (Expression)this.getChild(Expression.class, RangeCondition.RBOUND);
  }

  public void setRbound(Expression node) {
    super.setChild(RangeCondition.RBOUND, node);
  }


  public static RangeCondition newInstance(SModel sm, boolean init) {
    return (RangeCondition)SModelUtil_new.instantiateConceptDeclaration("swiftteams.nikitin.sql.structure.RangeCondition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RangeCondition newInstance(SModel sm) {
    return RangeCondition.newInstance(sm, false);
  }

}
