package swiftteams.nikitin.sql.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BinaryLogicalCondition extends LogicalCondition {
  public static final String concept = "swiftteams.nikitin.sql.structure.BinaryLogicalCondition";
  public static final String OPEARTOR = "opeartor";
  public static final String LEFT = "left";
  public static final String RIGHT = "right";

  public BinaryLogicalCondition(SNode node) {
    super(node);
  }

  public BinaryLogicalConditionData getOpeartor() {
    String value = super.getProperty(BinaryLogicalCondition.OPEARTOR);
    return BinaryLogicalConditionData.parseValue(value);
  }

  public void setOpeartor(BinaryLogicalConditionData value) {
    super.setProperty(BinaryLogicalCondition.OPEARTOR, value.getValueAsString());
  }

  public Condition getLeft() {
    return (Condition)this.getChild(Condition.class, BinaryLogicalCondition.LEFT);
  }

  public void setLeft(Condition node) {
    super.setChild(BinaryLogicalCondition.LEFT, node);
  }

  public Condition getRight() {
    return (Condition)this.getChild(Condition.class, BinaryLogicalCondition.RIGHT);
  }

  public void setRight(Condition node) {
    super.setChild(BinaryLogicalCondition.RIGHT, node);
  }


  public static BinaryLogicalCondition newInstance(SModel sm, boolean init) {
    return (BinaryLogicalCondition)SModelUtil_new.instantiateConceptDeclaration("swiftteams.nikitin.sql.structure.BinaryLogicalCondition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BinaryLogicalCondition newInstance(SModel sm) {
    return BinaryLogicalCondition.newInstance(sm, false);
  }

}
