package swiftteams.nikitin.sql.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;

public class TableColumnReference_Editor extends DefaultNodeEditor {

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_0363_0(context, node);
  }

  public EditorCell createCollection_0363_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_0363_0(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createModelAccess_0363_0(context, node));
    editorCell.addEditorCell(this.createConstant_0363_0(context, node, "."));
    editorCell.addEditorCell(this.createRefCell_0363_1(context, node));
    return editorCell;
  }

  public EditorCell createConstant_0363_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_0363_0(editorCell, node, context);
    setupLabel_Constant_0363_0(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createModelAccess_0363_0(EditorContext context, SNode node) {
    ModelAccessor modelAccessor = this._modelAccessorFactory_1217248146012(context, node);
    EditorCell_Property editorCell = EditorCell_Property.create(context, modelAccessor, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    setupBasic_ModelAccess_0363_0(editorCell, node, context);
    setupLabel_ModelAccess_0363_0(editorCell, node, context);
    editorCell.setDefaultText("<parent name>");
    return editorCell;
  }

  public ModelAccessor _modelAccessorFactory_1217248146012(final EditorContext editorContext, final SNode node) {
    return new ModelAccessor() {

      public String getText() {
        return SPropertyOperations.getString(((SNode)SNodeOperations.getParent(SLinkOperations.getTarget(node, "reference", false))), "name");
      }

      public void setText(String text) {
      }

      public boolean isValidText(String text) {
        return true;
      }
    };
  }

  public EditorCell createRefCell_0363_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new TableColumnReference_Editor._Inline0363_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefCell_0363_0(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_RefCell_0363_0((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell_0363_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("reference");
    provider.setNoTargetText("<no reference>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell_0363_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_0363_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_0363_0");
  }

  private static void setupBasic_ModelAccess_0363_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("ModelAccess_0363_0");
  }

  private static void setupBasic_Constant_0363_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_0363_0");
  }

  private static void setupBasic_RefCell_0363_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_ModelAccess_0363_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_0363_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_RefCell_0363_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class _Inline0363_0 extends AbstractCellProvider {

    public _Inline0363_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty_0363_1(context, node);
    }

    public EditorCell createProperty_0363_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_Property_0363_0(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_Property_0363_0((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty_0363_1(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("columnName");
      provider.setNoTargetText("<name>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty_0363_0_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_Property_0363_0(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_columnName");
    }

    private static void setupLabel_Property_0363_0(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}

}
