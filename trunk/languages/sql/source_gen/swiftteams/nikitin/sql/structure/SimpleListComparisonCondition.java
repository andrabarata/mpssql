package swiftteams.nikitin.sql.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SimpleListComparisonCondition extends SimpleComparisonCondition {
  public static final String concept = "swiftteams.nikitin.sql.structure.SimpleListComparisonCondition";
  public static final String OPERATOR = "operator";
  public static final String LIST = "list";
  public static final String SUBQUERY = "subquery";

  public SimpleListComparisonCondition(SNode node) {
    super(node);
  }

  public SimpleListComparisonConditionData getOperator() {
    String value = super.getProperty(SimpleListComparisonCondition.OPERATOR);
    return SimpleListComparisonConditionData.parseValue(value);
  }

  public void setOperator(SimpleListComparisonConditionData value) {
    super.setProperty(SimpleListComparisonCondition.OPERATOR, value.getValueAsString());
  }

  public ExpressionList getList() {
    return (ExpressionList)this.getChild(ExpressionList.class, SimpleListComparisonCondition.LIST);
  }

  public void setList(ExpressionList node) {
    super.setChild(SimpleListComparisonCondition.LIST, node);
  }

  public SubQuery getSubquery() {
    return (SubQuery)this.getChild(SubQuery.class, SimpleListComparisonCondition.SUBQUERY);
  }

  public void setSubquery(SubQuery node) {
    super.setChild(SimpleListComparisonCondition.SUBQUERY, node);
  }


  public static SimpleListComparisonCondition newInstance(SModel sm, boolean init) {
    return (SimpleListComparisonCondition)SModelUtil_new.instantiateConceptDeclaration("swiftteams.nikitin.sql.structure.SimpleListComparisonCondition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SimpleListComparisonCondition newInstance(SModel sm) {
    return SimpleListComparisonCondition.newInstance(sm, false);
  }

}
