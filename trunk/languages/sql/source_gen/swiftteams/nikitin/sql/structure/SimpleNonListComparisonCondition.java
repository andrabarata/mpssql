package swiftteams.nikitin.sql.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SimpleNonListComparisonCondition extends SimpleComparisonCondition {
  public static final String concept = "swiftteams.nikitin.sql.structure.SimpleNonListComparisonCondition";
  public static final String OPERATOR = "operator";
  public static final String LEFT = "left";
  public static final String RIGHT = "right";

  public SimpleNonListComparisonCondition(SNode node) {
    super(node);
  }

  public SimpleNonListComparisonConditionData getOperator() {
    String value = super.getProperty(SimpleNonListComparisonCondition.OPERATOR);
    return SimpleNonListComparisonConditionData.parseValue(value);
  }

  public void setOperator(SimpleNonListComparisonConditionData value) {
    super.setProperty(SimpleNonListComparisonCondition.OPERATOR, value.getValueAsString());
  }

  public Expression getLeft() {
    return (Expression)this.getChild(Expression.class, SimpleNonListComparisonCondition.LEFT);
  }

  public void setLeft(Expression node) {
    super.setChild(SimpleNonListComparisonCondition.LEFT, node);
  }

  public Expression getRight() {
    return (Expression)this.getChild(Expression.class, SimpleNonListComparisonCondition.RIGHT);
  }

  public void setRight(Expression node) {
    super.setChild(SimpleNonListComparisonCondition.RIGHT, node);
  }


  public static SimpleNonListComparisonCondition newInstance(SModel sm, boolean init) {
    return (SimpleNonListComparisonCondition)SModelUtil_new.instantiateConceptDeclaration("swiftteams.nikitin.sql.structure.SimpleNonListComparisonCondition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SimpleNonListComparisonCondition newInstance(SModel sm) {
    return SimpleNonListComparisonCondition.newInstance(sm, false);
  }

}
