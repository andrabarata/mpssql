package swiftteams.nikitin.sql.generator.baseLanguage.template.transformation.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TransformationHelper {

  public static SNode getConcatenationExpression(Iterable<SNode> expressions, String separator) {
    SNode result = SNodeOperations.copyNode(Sequence.fromIterable(expressions).first());
    SNode concatenation;
    SNode comma;
    for(SNode expression : Sequence.fromIterable(expressions)) {
      if (SNodeOperations.getIndexInParent(expression) != 0) {
        comma = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
        if (separator == null) {
          SPropertyOperations.set(comma, "value", "");
        } else
        {
          SPropertyOperations.set(comma, "value", separator);
        }
        concatenation = createPlus(comma, SNodeOperations.copyNode(expression));
        result = createPlus(result, concatenation);
      }
    }
    return result;
  }

  public static SNode getVarCharWrapper(SNode expression) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(expression), new _Quotations.QuotationClass_1().createNode()) || TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(expression), new _Quotations.QuotationClass_0().createNode())) {
      return createSequence(expression);
    }
    return SLinkOperations.getTarget(expression, "expression", true);
  }

  public static String getParameterName(SNode parameter) {
    if (SNodeOperations.isInstanceOf(parameter, "swiftteams.nikitin.sql.structure.DeclarationTableRowParameter")) {
      return SPropertyOperations.getString(SNodeOperations.cast(parameter, "swiftteams.nikitin.sql.structure.DeclarationTableRowParameter"), "variable_name");
    }
    if (SNodeOperations.isInstanceOf(parameter, "swiftteams.nikitin.sql.structure.AbstractTableColumnReference")) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(parameter, "swiftteams.nikitin.sql.structure.AbstractTableColumnReference"), "reference", false), "columnName");
    }
    return "fail";
  }

  private static SNode createPlus(SNode left, SNode right) {
    SNode result;
    if (SNodeOperations.isInstanceOf(right, "jetbrains.mps.baseLanguage.structure.StringLiteral")) {
      if (SNodeOperations.isInstanceOf(left, "jetbrains.mps.baseLanguage.structure.StringLiteral")) {
        result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
        SPropertyOperations.set(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value", SPropertyOperations.getString(SNodeOperations.cast(left, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value") + SPropertyOperations.getString(SNodeOperations.cast(right, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value"));
        return result;
      } else
      if (SNodeOperations.isInstanceOf(left, "jetbrains.mps.baseLanguage.structure.PlusExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(left, "jetbrains.mps.baseLanguage.structure.PlusExpression"), "rightExpression", true), "jetbrains.mps.baseLanguage.structure.StringLiteral")) {
        SNode right_child_of_left = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(left, "jetbrains.mps.baseLanguage.structure.PlusExpression"), "rightExpression", true), "jetbrains.mps.baseLanguage.structure.StringLiteral");
        SPropertyOperations.set(right_child_of_left, "value", SPropertyOperations.getString(right_child_of_left, "value") + SPropertyOperations.getString(SNodeOperations.cast(right, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value"));
        return left;
      }
    }
    result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PlusExpression", null);
    SLinkOperations.setTarget(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.PlusExpression"), "leftExpression", left, true);
    SLinkOperations.setTarget(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.PlusExpression"), "rightExpression", right, true);
    return result;
  }

  private static SNode createSequence(SNode expression) {
    SNode t = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
    SPropertyOperations.set(t, "value", "'");
    SNode sequence = SConceptOperations.createNewNode("swiftteams.nikitin.sql.structure.StringSequence", null);
    SLinkOperations.addChild(sequence, "strings", t);
    SLinkOperations.addChild(sequence, "strings", SNodeOperations.copyNode(SLinkOperations.getTarget(expression, "expression", true)));
    SLinkOperations.addChild(sequence, "strings", SNodeOperations.copyNode(t));
    return sequence;
  }

}
